###########################
### FUNCTIONS: Space (#208)
###########################

# Setup the MUSH object

@set #208=!SAFE NO_COMMAND
-
@wipe #208
-
@set #208=SAFE
-
@desc #208=
  [center(Space System\(\) Documentation,79,-)]%r
  %b%b+[repeat(-,73)]+%r
  [align(2 20 18 33 2,,[ansi(c,SUBFUNCTION)],[ansi(c,ARGUMENTS)],[ansi(c,DESCRIPTION)],,,|)]%r
  [map(map.doc,[lattr(me/doc.*)], ,%r)]%r
  %b%b+[repeat(-,73)]+%r
  [repeat(-,79)]
-
&MAP.DOC #208=
  [align(2 20 18 33 2,,[ansi(h,[after(%0,DOC.)])],[iter([extract([v(%0)],1,1,|)],dec(inum(0)): [itext(0)],:,%r)],[extract(v(%0),2,1,|)],,,|)]
-
&DOC.ACTIVATE #208=ship|Activate the ship so it's notified each cycle tick.
-
&DOC.ADDCONSOLE #208=ship:console|Sets up console to work with ship.
-
&DOC.ADVANCE #208=ship|Moves ship 1 step forward if destination is set.
-
&DOC.ADVANCE.CALC #208=ship|Returns next anticipated position if destination is set.
-
&DOC.CANBOARD #208=ship:player|Returns 1 if player can board ship.
-
&DOC.CANFLY #208=ship|Returns 1 if ship can be flown. Capships need >1 con manned.
-
&DOC.CANUSECONSOLE #208=console:player|Returns 1 if player can man console.
-
&DOC.CLASS #208=object|Returns object's class.
-
&DOC.CLONE.SHIP #208=ship|Makes an exact copy of ship.
-
&DOC.CYCLE #208=|Returns time in seconds until next space tick.
-
&DOC.DEACTIVATE #208=ship|Deactivates the ship for landing etc.
-
&DOC.DISTANCE #208=object1:object2|Returns distance between two objects.
-
&DOC.ETA #208=ship|Returns ETA in timestring format if destination is set.
-
&DOC.HASSHUTTLE #208=player|Returns 1 if player was given a free shuttle.
-
&DOC.HEADING #208=ship|Returns heading of ship.
-
&DOC.ISACTIVE #208=ship|Returns 1 if ship is active.
-
&DOC.ISCAPSHIP #208=ship|1 if it's a capship, 0 otherwise.
-
&DOC.ISCAPTAIN #208=ship:player|Returns 1 if player meets captain permissions for ship.
-
&DOC.ISCONSOLE #208=object|1 if object is a valid console.
-
&DOC.ISCREW #208=ship:player|1 if player meets crew permissions for ship.
-
&DOC.ISDOCKED #208=ship|1 if ship is in a valid landing area.
-
&DOC.ISGUEST #208=ship:player|1 if player meets guest permissions for ship.
-
&DOC.ISJUMP #208=object|1 if object is a valid jump point.
-
&DOC.ISMANNED #208=console|1 if console is currently manned.
-
&DOC.ISMANNING #208=console:player|1 if player is manning console.
-
&DOC.ISMOVING #208=ship|1 if ship has a move action queued.
-
&DOC.ISSHIP #208=ship|1 if it's a valid ship object.
-
&DOC.JUMP #208=ship:jump point|Jumps ship through jump point if both are valid.
-
&DOC.LAND #208=ship:target|Lands ship on target.
-
&DOC.LAUNCH #208=ship|Launches the ship.
-
&DOC.LIST.REPORT #208=ship|Space delimited list of visible contacts.
-
&DOC.LIST.SKILLS #208=|List of valid space skills for +scheck.
-
&DOC.LIST.SYSTEM.ACTIVE #208=system|Space delimited list of active ships in system.
-
&DOC.LIST.SYSTEM.ALL #208=system|Space delimited list of all objects in system.
-
&DOC.MANNEDBY #208=console|Returns name of person manning console.
-
&DOC.MOVE #208=object:x:y|Move object.
-
&DOC.NOTIFY.CONSOLES #208=ship|Sends message prefixed with ">" to manned consoles.
-
&DOC.NOTIFY.SHIP #208=ship|Sends non-prefixed message to everyone on ship.
-
&DOC.ROSTER #208=ship|Ascii formatted ship roster.
-
&DOC.ROSTER.ADD #208=ship:player:position|Add a player to a ship roster.
-
&DOC.ROSTER.REMOVE #208=ship:player|Remove a player from a ship roster.
-
&DOC.SCAN #208=ship|Ascii formatted list of visible contacts.
-
&DOC.SCAN.TARGET #208=target|Ascii formatted scan results for target.
-
&DOC.SETDEST #208=ship:x:y|Set the ship's intended destination.
-
&DOC.SKILL #208=ship:skill|Return the max skill value out of everyone manning a console on ship.
-
&DOC.SPEED #208=ship|Return skill-adjusted max speed value for ship on a 0-7 scale.
-
&DOC.SPEED.BASE #208=ship|Return base speed value of ship on a 0-7 scale.
-
&DOC.SPOSE #208=ship:message|Emits a name-prefixed ship pose to all active ships in system.
-
&DOC.UPDATE.REPORT #208=ship|Updates ship's list of contacts and notifies of any changes.
-
&DOC.HASBAY #208=ship|1 if ship has a landable bay.
-
&DOC.CANJUMP #208=ship|1 if ship is capable of jumping.
-
&DOC.HULL #208=ship|Current:Max
-
&DOC.STATUS #208=ship|Ascii printout of ship status.
-
&DOC.SHIELDS #208=ship|Current:Max
-
&DOC.CARGO #208=ship|Current:Max
-
&DOC.VALUE #208=ship|Econ value of ship.
-
&DOC.MANIFEST #208=ship|Pre-formatted manifest for ship.
-
&DOC.SHIPSBYCAPTAIN #208=player|Return list of ships captained by player.
-
&DOC.ISSTATION #208=ship|1 if ship is a station.
-
&DOC.FINDCLASS #208=dbref or string|firstof match against list of classes and list of class names. Returns dbref of class. Dbref input used to verify ISCLASS, partial string match returns dbref of class name.
-
&DOC.GETCAPTAIN #208=ship|Returns dbref of ship's captain.
-
&DOC.FINDEXIT #208=ship:exit|firstof match against exit dbref or name to verify that an exit is in the same location as a ship.
-
&DOC.ISTAXIWAY #208=exit|1 if exit is taxiable. 
-
&DOC.TAXI #208=ship:exit|Taxis a ship through an exit.
-
&DOC.GETDESTOBJ #208=ship|Returns destination object of ship.
-
&DOC.FINDSHIP.UNLOAD #208=ship:ship dbref or string|Locates %1 in %0's bay by partial string match or dbref verify.
-
&DOC.FINDSHIP.LOAD #208=ship:ship dbref or string|Locates %1 at %0's location by partial string match or dbref verify.
-
&DOC.LOAD.SHIP #208=ship:victim-ship:enactor-dbref|Checks permissions and loads victim-ship aboard ship.
-
&DOC.UNLOAD.SHIP #208=ship:victim-ship:enactor-dbref|Checks permissions and unloads victim-ship from ship.
-
&DOC.FINDSHIP.ALL #208=ship:ship dbref or string|Locates %1 anywhere by partial string match or dbref verify.
-
&DATA #208=#351
-
@startup #208=
  @trig me/tick;
  @cemit SysLog=[ansi(bh,\[)]SysLog[ansi(bh,\])] Resuming GhettoSpace.  [words(get(v(data)/list.active))] active ships.
-
&SUBFN.RESTART #208=
  think [syslog(
            SPACE,
            Rebooting GhettoSpace.  [words(get(v(data)/list.active))] active ships. 
            Cycle interval set to [default(v(data)/interval,60)] seconds.
            )];
  @dol get(v(data)/list.active)={@drain/any/all ##;@nszemit ##=[ansi(rh,WARNING:)] Space System Reboot by Admin.}; 
  @trig me/tick
-
&TICK #208=
  @wait [default(v(data)/interval,60)]={@trig me/tick};
  @dol get(v(data)/list.active)={@notify/any ##;think [spacesys(update.report,##)]}
-
&FN.MOVE #208=
  [set(%0,space`x:%1)][set(%0,space`y:%2)]
-
&FN.ETA #208=
  ifelse(
      hasattrval(%0,space`destination),
      timestring(add(
                    mul(
                      floor(fdiv(
                                dist2d(
                                      get(%0/space`x),
                                      get(%0/space`y),
                                      first(get(%0/space`destination)),
                                      last(get(%0/space`destination))
                                      ),
                                u(fn.speed,%0)
                                )),
                      get(v(data)/interval)
                      ),
                    u(fn.cycle)
                    )),
      #-1 NO DESTINATION SET
      )
-
&FN.ADVANCE #208=
  ifelse(
      hasattrval(%0,space`destination),
      [u(fn.move,%0,first(setr(0,ulocal(fn.advance.calc,%0))),last(%q0))]
      [if(
          strmatch(%q0,setr(1,get(%0/space`destination))),
          [wipe(%0/space`destination)]
          [wipe(%0/space`destination.obj)]
          [u(fn.notify.ship,%0,The hum of the engines diminishes as the ship comes to a stop.)]
          [u(fn.notify.consoles,%0,Arrived at destination %q1.  Speed is now 0 km/h.)]
          )],
      #-1 NO DESTINATION SET
      )
-
&FN.HEADING #208=
  [setq(dx,sub(first(setr(0,get(%0/space`destination))),get(%0/space`x)))][setq(dy,sub(last(%q0),get(%0/space`y)))][u(subfn.rad2deg,atan2(mul(r(dx),-1),r(dy)))]
-
&SUBFN.DELTA_Y #208=
  [mul(-1,u(fn.speed,%0),sin(mul(0.017453294444,add(90,u(fn.heading,%0)))))]
-
&SUBFN.DELTA_X #208=
  [mul(-1,u(fn.speed,%0),cos(mul(0.017453294444,add(90,u(fn.heading,%0)))))]
-
&FN.ADVANCE.CALC #208=
  ifelse(
      lt(
        dist2d(
            get(%0/space`x),
            get(%0/space`y),
            first(setr(0,get(%0/space`destination))),
            last(%q0)
            ),
        ulocal(fn.speed,%0)
        ),
      %q0,
      [add(get(%0/space`x),ulocal(subfn.delta_x,%0))] [add(get(%0/space`y),ulocal(subfn.delta_y,%0))]
      )
#  Deprecated
# ifelse(
#      t(hasattrval(%0,space`destination)),
#      [min(add(get(%0/space`x),u(subfn.delta_x,%0)),first(get(%0/space`destination)))] 
#       [min(add(get(%0/space`y),u(subfn.delta_y,%0)),last(get(%0/space`destination)))],
#      #-1 NO DESTINATION SET
#      )
-
&FILTER.MANNEDCONS #208=
  spacesys(ismanned,%0)
-
&FN.SKILL #208=
  lmath(max,iter(
                filter(filter.mannedcons,get(%0/data.consoles)),
                ulocal(subfn.skill,spacesys(mannedby,itext(0)),get(v(data)/skill.%1))
                ))
-
&SUBFN.SKILL #208=
  chargen(get.skill,%0,%1)
-
&FN.LIST.SKILLS #208=
  lattr(v(data)/skill.*)
-
&FN.ISCAPSHIP #208=
  ifelse(eq(default(%0/space`size,1),2),1,0)
-
&FN.SPEED.BASE #208=
  mul(default(%0/space`maxspeed,0),2)
-
&FN.SPEED #208=
    mul(
      spacesys(speed.base,%0),
      add(
        switch(
            spacesys(skill,%0,ifelse(spacesys(iscapship,%0),pilot-cap,pilot-fig)),
            1,0.575,
            2,0.65,
            3,0.725,
            4,0.8,
            5,0.875,
            6,0.95,
            >6,1,
            0.5
            ),
        switch(
            spacesys(skill,%0,ifelse(spacesys(iscapship,%0),engineer-cap,engineer-fig)),
            1,0.575,
            2,0.65,
            3,0.725,
            4,0.8,
            5,0.875,
            6,0.95,
            >6,1,
            0.5
            )
        )
      )
-
&SUBFN.RAD2DEG #208=
  add(fdiv(mul(%0,180),pi()),180)
-
&OLD.FN.ADVANCE.CALC #208=
  ifelse(
      hasattrval(%0,space`destination),
        vmin(
            vadd(
                  vmul(
                      vmul(
                          vunit(
                              vsub(get(%0/space`destination),[get(%0/space`x)] [get(%0/space`y)])
                              ),
                          default(%0/space`maxspeed,10)
                          ),
                      default(v(data)/default.speed,1)
                      ),
                  [get(%0/space`x)] [get(%0/space`y)]
                  ),
            get(%0/space`destination)
            ),
      #-1 NO DESTINATION SET
      )
-
&FN.CLASS #208=
  [ifelse(
      hasattrpval(%0,space`class),
      get(%0/space`class),
      Unknown
      )]
-
&FN.ISMOVING #208=
  t(member(iter(getpids(%0),after(pidinfo(itext(0)),SPACE`QUEUE`)),MOVE))
-
&FN.CYCLE #208=
  ifelse(t(setr(0,pidinfo(first(lpids(%!,w)),time))),%q0,0)
-
&FN.ADDCONSOLE #208=
  [switch(
      [spacesys(isship,%0)]
      [spacesys(isconsole,%1)] 

      0?,#-1 INVALID SHIP OBJECT,
      10,#-1 INVALID CONSOLE OBJECT,
      11,[set(%1,data.ship:%0)]
         [setq(b,zone(%1,%0))]
         [powers(%1,api)]
         [powers(%1,pemit_all)]
         [setq(a,lock(%1,=%1))]
         [set(%1,listen_parent)]
         [set(%1,monitor)]
         [set(%0,data.consoles:[trim([get(%0/data.consoles)] %1)])]
         )]
-
&FN.DISTANCE #208=
  [dist2d(
      get(%0/space`x),
      get(%0/space`y),
      get(%1/space`x),
      get(%1/space`y)
      )]
-
&FN.LAND #208=
  [switch(
      [u(fn.isship,%0)]
      [t(setr(1,locate(%0,%1,nT)))]
      [not(u(fn.isdocked,%0))]
      [and(
          eq(get(%0/space`x),get(%q1/space`x)),
          eq(get(%0/space`y),get(%q1/space`y))
          )]
      [t(hasattrval(%q1,data.landing))],

      0????,#-1 INVALID SHIP OBJECT,
      10???,#-1 INVALID TARGET OBJECT,
      110??,#-1 SHIP IS ALREADY DOCKED,
      1110?,#-1 OUT OF RANGE,
      11110,#-1 NO LANDING ZONE ON TARGET,
      11111,[u(fn.notify.ship,%0,The ship lurches as it touches down.)]
            [spacesys(spose,%0,disappears as it [ifelse(spacesys(isship,%q1),docks with the,descends toward)] [name(%q1)].)]
            [tel(%0,setr(2,get(%q1/data.landing)),silent)]
            [nsremit(%q2,The [ansi(wh,name(%0))] touches down in the landing area.)]
            [set(%0,data.docked:%q2)]
            [set(%0,!opaque)]
            [spacesys(deactivate,%0)]
            [spacesys(update.report,%0)]
            [iter(remove(spacesys(list.system.active,loc(%q1)),%0),spacesys(update.report,itext(0)))]
            )]
-
&FN.DEACTIVATE #208=
  switch(
      u(fn.isactive,%0),

      1,set(v(data),list.active:[remove(get(v(data)/list.active),%0)]),
      #-1 SHIP IS NOT ACTIVE
      )
-
&FN.ACTIVATE #208=
  switch(
      [u(fn.isship,%0)]
      [not(u(fn.isactive,%0))],

      0?,#-1 INVALID SHIP OBJECT.,
      10,#-1 SHIP IS ALREADY ACTIVE.,
      11,[set(v(data),list.active:[trim([get(v(data)/list.active)] %0)])]
-
&FN.LAUNCH #208=
  [switch(
      [u(fn.isship,%0)]
      [u(fn.isdocked,%0)]
      [hasattrval(loc(%0),space`loc)],

      0??,#-1 INVALID SHIP OBJECT,
      10?,#-1 SHIP ALREADY UNDOCKED,
      110,#-1 INVALID LANDING AREA SPACE LOC
      111,[u(fn.notify.ship,%0,The roar of the engines diminishes as the ship breaks into orbit.)]
          [nsremit(loc(%0),The [ansi(wh,name(%0))] dissapears from sight as it's propelled into orbit.)]
          [tel(%0,loc(setr(0,get(loc(%0)/space`loc))),silent)]
          [set(%0,data.docked:)]
          [set(%0,opaque)]
          [set(%0,space`x:[get(%q0/space`x)])]
          [set(%0,space`y:[get(%q0/space`y)])]
          [u(fn.notify.consoles,%0,Launch sequence complete.)]
          [iter(spacesys(list.system.active,loc(%0)),spacesys(update.report,itext(0)))]
          [spacesys(spose,%0,ifelse(
                                spacesys(isship,%q0),
                                glides out of the [name(%q0)]'s docking bay.,
                                rises out of the atmosphere of [name(%q0)].
                                ))]
          )]
-
&FN.ISSHIP #208=
  [strmatch(last(lparent(%0)),get(v(data)/parent.ship))]
-
&FN.UPDATE.REPORT #208=
# %q0 = New contacts detected.
# %q1 = Contacts lost from sensors.
  [ifelse(
      [not(u(fn.isship,%0))],
      #-1 INVALID SHIP OBJECT,
      [setq(0,setdiff(setr(2,u(fn.list.report,%0)),after(setr(3,get(%0/space`report)),|)))]
      [setq(1,setdiff(after(%q3,|),%q2))]
      [iter(%q0,u(fn.notify.consoles,%0,New contact [name(itext(0))] [ansi(gh,detected)] on sensors.))]
      [iter(%q1,u(fn.notify.consoles,%0,Contact [name(itext(0))] [ansi(rh,lost)] from sensors.))]
      [set(%0,space`report:[secs()]|%q2)]
      %q2
      )]
-
&FN.SPOSE #208=
  [iter(
      spacesys(list.system.active,loc(%0)),
      spacesys(notify.consoles,itext(0),The [ansi(wh,name(%0))] %1)
      )]
  [if(t(%3),nscemit(Comms,[ansi(yh,SPOSE)]-[ansi(wh,name(%2))]: The [name(%0)] %1,1))]
-
&FN.LIST.SYSTEM.ACTIVE #208=
  filter(filter.active,u(fn.list.system.all,%0))
-
&FN.LIST.SYSTEM.ALL #208=
  filter(filter.spaceobj,lcon(%0))
-
&FN.LIST.REPORT #208=
  ifelse(
      [not(u(fn.isship,%0))],
      #-1 INVALID SHIP OBJECT,
      munge(
          sort.report,
          iter(
              setr(0,remove(u(fn.list.system.all,loc(%0)),%0)),
              u(fn.distance,%0,itext(0))
              ),
          %q0
          )
      )
-
&SORT.REPORT #208=
  sort(%0)
-
&FILTER.ACTIVE #208=
  t(spacesys(isactive,%0)) 
-
&FILTER.SPACEOBJ #208=
  [and(
      hasattrval(%0,space`x),
      hasattrval(%0,space`y),
      not(hasattrval(%0,data.docked))
      )]
-
&FN.NOTIFY.SHIP #208=
  [nsremit(%0,%1)]
  [nszemit(%0,%1)]
-
&FN.NOTIFY.CONSOLES #208=
  nsremit(
    setunion(iter(get(%0/data.consoles),loc(itext(0))),),
    [ansi(gh,>)] %1
    )
-
# Function: iscrew(ship DBREF, player DBREF)
# Returns true if the player is the ship's captain or a crew member
&FN.ISCREW #208=[t(firstof(
                    member(setr(0,get(%0/data.roster)),%1:captain),
                    member(%q0,%1:crew),
                    orflags(%1,Wr),
                    0))]
-
&FN.ISGUEST #208=
  or(
    orflags(%1,Wr),
    t(match(get(%0/data.roster),%1:*))
    )
-
# Function: isdocked(ship DBREF)
# Returns true if the ship is docked.
&FN.ISDOCKED #208=[t(hastype([get(%0/data.docked)],ROOM))]
-
# Function: canboard(ship DBREF, player DBREF)
# Returns true if the player can board the ship
&FN.CANBOARD #208=[or(
                    t(match(get(%0/data.roster),%1:*)),
                    orflags(%1,Wr)
                    )]
-
# Function: canuseconsole(console DBREF, player DBREF)
# Returns true if the player can use the console
&FN.CANUSECONSOLE #208=
  [firstof(
        [u(#208/fn.ismanning,%0,%1)],
        [and(
            [u(#208/fn.isunmanned,%0)],
            [u(#208/fn.iscrew,%0,%1)]
            )],
        [and(
            u(fn.ismanned,%0),
            not(strmatch(loc(get(%0/data.manned)),loc(%0))),
            u(fn.iscrew,%0,%1)
            )],
        0)]
-
# Function: ismanned(console DBREF)
# Returns true if the console is manned
&FN.ISMANNED #208=[t(get(%0/data.manned))]
-
# Function: isunmanned(console DBREF)
# Returns true if the console is unmanned
&FN.ISUNMANNED #208=[not(get(%0/data.manned))]
-
# Function: ismanning(console DBREF, player DBREF)
# Returns true if the player is manning the console
&FN.ISMANNING #208=[strmatch([get(%0/data.manned)],%1)]
-
# Function: mannedby(console DBREF)
# Returns the name of the player manning the console
&FN.MANNEDBY #208=
  [ifelse(
      u(fn.ismanned,%0),
      name(get(%0/data.manned)),
      #-1 UNMANNED
      )]
-
# Subfunction: actors()
# Debug subfunction used to determine enactor, executor and caller
&SUBFN.ACTORS #208=[pemit(%#,
  /@@ Enactor name and DBREF @@/
  \%#: [name(%#)](%#) 

  /@@ Executor name and DBREF @@/
  \%!: [name(%!)](%!) 

  /@@ Caller name and DBREF @@/
  \%@: [name(%@)](%@)
)]
-
# Temporary stuff, belongs elsewhere
&FN.HICMD #208=[ansi(hu,%0)]
-
&FN.SCAN #208=
  [titlebar(Sensor Report: [name(%0)] in [trim(before(name(loc(%0)),last(name(loc(%0)))))])]%r%b[ansi(y,align(2 39 21 >12,ID,Name,Class,Distance))]%r
  %b[ansi(r,--%b[repeat(-,39)]%b[repeat(-,21)]%b[repeat(-,12)])]%r
  [iter(
      setr(1,spacesys(list.report,%0)),
      %b[align(
            2 39 21 >12,
            #@,
            [name(itext(0))],
            [spacesys(class,itext(0))],
            [round(spacesys(distance,%0,itext(0)),2,1)]km
            )],
      ,%r)]%r
  [footerbar([words(%q1)] Contacts)]
  [set(%0,space`report:[secs()]|%q1)]
-
&FN.SCAN.TARGET #208=
  [titlebar(Scan Report: [name(%0)])]%r
  [ifelse(
      hasattrval(%!,subfn.scan.[setr(0,edit(spacesys(class,%0),%b,_))]),
      ulocal(subfn.scan.%q0,%0),
      [u(%0/describe)]%r%r
      Location%r%t
      X: [get(%0/space`x)]%tY: [get(%0/space`y)]%r
      [ansi(rh,Landing Area)]: [ifelse(and(not(xget(%0,data.landing.hidden)),hasattrval(%0,data.landing)),[ansi(gh,Yes)]%r[ansi(rh,Bay Doors Open)]: [ifelse(spacesys(isbayopen,%0),[ansi(gh,Yes)],No)],No)]
      )]%r
  [footerbar(Class: [edit(%q0,_,%b)])]
-
&SUBFN.SCAN.CELESTIAL #208=
  [u(%0/describe)]%r
  Location%r%t
  X: [get(%0/space`x)]%tY: [get(%0/space`y)]%r
  [ansi(rh,Landing Area:)] [ifelse(and(not(xget(%0,data.landing.hidden)),hasattrval(%0,data.landing)),name(zone(get(%0/data.landing))),N/A)]
-
&FN.SCAN.LAND #208=
  [u(loc(%0)/nameformat)]%r[u(loc(%0)/describe)]%r[u(loc(%0)/conformat,cat(lvplayers(loc(%0)),lvthings(loc(%0))))]
-
&FN.ISACTIVE #208=
  [t(member(get(v(data)/list.active),%0))]
-
&FN.SETDEST #208=
  [set(%0,space`destination:[get(%1/space`x)] [get(%1/space`y)])]
  [set(%0,space`destination.obj:%1)]
-
&FN.ISJUMP #208=
  strmatch(parent(%0),get(v(data)/parent.jump))
-
&SUBFN.JUMP.CALC #208=
  [setq(0,switch(%2,>6,0,6,5,5,10,4,20,3,30,2,40,1,50,70))]
  [add(%0,rand(sub(%q0,mul(%q0,2)),%q0))] [add(%1,rand(sub(%q0,mul(%q0,2)),%q0))]
-
&FN.JUMP #208=
  switch(
      [u(fn.isship,%0)]
      [u(fn.isjump,%1)]
      [t(hasattrval(%1,link))]
      [not(ulocal(fn.ismoving,%0))]
      [t(eq(u(fn.distance,%0,%1),0))],

      0????,#-1 INVALID SHIP OBJECT,
      10???,#-1 INVALID JUMP POINT,
      110??,#-1 JUMP IS UNLINKED,
      1110?,#-1 SHIP IS IN MOTION,
      11110,#-1 OUT OF RANGE,
      11111,[spacesys(spose,%0,disappears in a flash of light through the [rest(name(%1))] jump point.)]
            [u(fn.notify.consoles,%0,Jumping to [name(loc(setr(1,get(%1/link))))]...)]
            [u(fn.notify.ship,%0,Reality is briefly distorted as the ship is hurtled through a jump point.)]
            [tel(%0,loc(%q1))]
            [iter(spacesys(list.system.active,loc(%1)),spacesys(update.report,itext(0)))]
            [spacesys(spose,%0,arrives in-system admist a flash of light near the [rest(name(%q1))] jump point.)]
            [iter(spacesys(list.system.active,loc(%0)),spacesys(update.report,itext(0)))]
            [spacesys(notify.consoles,%0,Jump complete.  New position: [setr(2,ulocal(subfn.jump.calc,get(%q1/space`x),get(%q1/space`y),spacesys(skill,%0,astrogation)))] 
                                         \([ansi(y,[round(sub(100,dist2d(get(%q1/space`x),get(%q1/space`y),first(%q2),last(%q2))),0)]\% jump accuracy)]\).
                                         )]
            [set(%0,space`x:[first(%q2)])]
            [set(%0,space`y:[last(%q2)])]
      )
-
&FN.HASSHUTTLE #208=
  t(hasattrval(%0,space`shuttle))
-
&FN.CLONE.CONSINROOM #208=
  iter(
      lvcon(%0),
      if(
        spacesys(isconsole,itext(0)),
        [setr(0,clone(itext(0)))][set(%q0,!halt)]
        )
      )
-
&FN.CLONE.SHIP #208=
  ifelse(
      not(strmatch(last(lparent(%0)),get(v(data)/parent.ship))),
      #-1 INVALID SHIP PARENT,
      [setr(1,create(%1))]
      [setq(a,parent(%q1,%0))]
      [setq(b,lock(%q1/zone,=%q1))]
      [setq(d,zone(%q1,%q1))]
      [set(%q1,space`x:)]
      [set(%q1,space`y:)]
      [setq(c,lock(%q1,=%q1))]
      [set(%q1,enter_ok)]
      [set(%q1,!no_command)]
      [if(hasattrval(%0,roomname),set(%q1,roomname:[get(%0/roomname)]))]
      [powers(%q1,api)]
      [iter(
          spacesys(clone.consinroom,%0),
          [tel(itext(0),%q1)][spacesys(addconsole,%q1,itext(0))]
          )]
      [if(hasattrval(%0,connected),ulocal(subfn.clone.ship.rooms,%0,%q1))]
      )
-
&SUBFN.CLONE.SHIP.ROOMS #208=
# First create the rooms.  Do the rooms alphabetically just so we know the lists are ordered.
  [iter(
      setr(1,sort(lsearch(all,type,room,zone,%0),name)),
      [setq(0,cat(%q0,clone(itext(0))))]
      [setq(a,zone(last(%q0),%1))]
      [set(last(%q0),describe:[get(itext(0)/describe)])]
      )]
# For each room, clone consoles, make exits, link appropriately.
  [iter(
      %q0,
      [iter(
          spacesys(clone.consinroom,extract(%q1,inum(0),1)),
          [tel(itext(0),itext(1))][spacesys(addconsole,%1,itext(0))]
          )]
      [iter(
          setr(2,lexits(extract(%q1,inum(0),1))),
          [setq(3,
              cat(%q3,open(
                        name(itext(0)),
                        extract(%q0,match(%q1,loc(itext(0))),1),
                        itext(1)
                        ))
              )]
          [setq(b,zone(last(%q3),%1))]
# Set up the exit hatch             
          [if(
            strmatch(name(itext(0)),Disembark),
            [set(%1,connected:[last(%q3)])]
            [link(last(%q3),variable)]
            [setq(b,zone(last(%q3),%1))]
            [setq(d,parent(last(%q3),get(v(data)/parent.airlock)))]
            [set(last(%q3),dark no_warn)]
            [powers(last(%q3),link)]
            [powers(last(%q3),api)]
            [alias(last(%q3),leave)]
            )]
          )]
      )]
-
&FN.ISCONSOLE #208=
  t(strmatch(last(lparent(%0)),get(v(data)/parent.console)))
-
&FN.ROSTER #208=
  [titlebar(Ship Roster: [name(%0)])]%r
  [ansi(y,align(30 14 32,Name,Access,Location))]%r
  [iter(
      sort(get(%0/data.roster),name),
      align(
          30 14 32,
          name(setr(0,first(itext(0),:))),
          capstr(last(itext(0),:)),
          ifelse(strmatch(zone(loc(%q0)),%0),name(loc(%q0)),ansi(rh,NOT ABOARD))
          ),
      ,%r)]%r
  [footerbar()]
-
&FN.ISCAPTAIN #208=
  ifelse(
      not(spacesys(isship,%0)),
      #-1 INVALID SHIP OBJECT,
      or(orflags(%1,Wr),t(match(get(%0/data.roster),%1:captain)))
      )
-
&FN.ROSTER.ADD #208=
  switch(
      [spacesys(isship,%0)]
      [spacesys(isguest,%0,%1)],

      0?,#-1 INVALID SHIP OBJECT,
      10,set(%0,data.roster:[trim([get(%0/data.roster)] %1:[lcstr(%2)])]),
      11,set(%0,data.roster:[regediti(get(%0/data.roster),%1:\\w*,%1:[lcstr(%2)])])
      )
-
&FN.ROSTER.REMOVE #208=
  ifelse(
      spacesys(isship,%0),
      set(%0,data.roster:[trim(ldelete(setr(0,get(%0/data.roster)),match(%q0,%1:*)))]),
      #-1 INVALID SHIP OBJECT
      )
-
&FN.HASBAY #208=
  hasattrval(%0/space`bay)
-
&FN.ISBAYOPEN #208=
  or(
    last(get(%0/space`bay),|),
    not(spacesys(isship,%0))
    )
-
&FN.OPENBAY #208=
  set(%0,space`bay:[first(get(%0/space`bay),|)]|1)
-
&FN.CLOSEBAY #208=
  set(%0,space`bay:[first(get(%0/space`bay),|)]|0)
-
&FN.CANJUMP #208=
  1
-
&FN.HULL #208=
  [get(%0/space`armor`cur)]:[max(power(mul(get(%0/space`armor),10),2),10)]
-
&FN.SHIELDS #208=
  [get(%0/space`shields`cur)]:[max(power(mul(get(%0/space`shields),10),2),10)]
-
&FN.CARGO #208=
  [get(%0/space`cargo`cur)]:[get(%0/space`cargo`max)]
-
&FN.CPU #208=
  [get(%0/space`cpu`cur)]:[max(mul(10,get(%0/space`cpu)),10)]
-
&FN.REACTOR #208=
  [get(%0/space`reactor`cur)]:[mul(100,get(%0/space`reactor))]
-
&FN.GUNS #208=
  [get(%0/space`guns)]|[get(%0/space`guns`cur)]
-
&FN.STATUS #208=
  [titlebar(Status: [name(%0)])]%r
  [table(
      [ansi(y,Class:)] [spacesys(class,%0)]|
      [ansi(y,Location:)] X: [get(%0/space`x)] Y: [get(%0/space`y)]|
      [ansi(y,Engines:)] [mul(get(v(data)/interval),setr(5,spacesys(speed,%0)))] km/h \(+[mul(100,sub(fdiv(%q5,spacesys(speed.base,%0)),1))]\% skill bonus\)|
      [ansi(y,Hull Integrity:)] [mul(fdiv(first(setr(0,spacesys(hull,%0)),:),last(%q0,:)),100)]\% \([first(%q0,:)]/[last(%q0,:)]\)|
      [ansi(y,Shields:)] [mul(fdiv(first(setr(1,spacesys(shields,%0)),:),last(%q1,:)),100)]\% \([first(%q1,:)]/[last(%q1,:)]\)|
      [ansi(y,Cargo Bay:)] [first(setr(2,spacesys(cargo,%0)),:)] of [last(%q2,:)] m3|
      [ansi(y,Reactor:)] [first(setr(3,spacesys(reactor,%0)),:)] of [last(%q3,:)] MW|
      [ansi(y,Computer:)] [mul(fdiv(first(setr(4,spacesys(cpu,%0)),:),last(%q4,:)),100)]\% Avail.,
      38,79,|
      )]%r
      [align(38 30,
            [ansi(y,Gun Mounts:)]%r
            [iter(
                 lnum(first(setr(4,spacesys(guns,%0)),|)),
                 %t<#@> [ifelse(gte(words(after(%q4,|)),#@),get(extract(after(%q4,|),#@,1)/title),Laser Cannon)],
                 ,
                 %r)],

            [if(
               hasattrval(%0,data.landing),
               [ansi(y,Bay Doors Open)]: [ifelse(spacesys(isbayopen,%0),[ansi(gh,Yes)],No)]
               )]
            )]%r
      %r[footerbar()]
-
&FN.VALUE #208=
  get(%0/value)
-
&FN.INTERVAL #208=
  get(v(data)/interval)
-
&FN.CANFLY #208=
  or(
    not(spacesys(iscapship,%0)),
    gt(words(filter(filter.mannedcons,get(%0/data.consoles))),1)
    )
-
&FN.SURVEY #208=
  [set(%0,space`survey`%1:[secs()])]
  [rpc(Econ.grant,%2,setr(Payout,mul(chargen(get.skill,%2,science),rand(15,60))))]
  %q<Payout>
-
&FN.SURVEY.LAST #208=
  default(%0/space`survey`%1,0)
-
&FN.HAIL #208=
  [spacesys(notify.consoles,%2,[ansi(gh,\[)][ansi(g,MESSAGE)][ansi(gh,\])] from [ansi(wh,name(%0))]: %3)]
  [spacesys(notify.consoles,%0,[ansi(gh,\[)][ansi(g,MESSAGE)][ansi(gh,\])] [ansi(wh,Outgoing)]: %3)]
  [nscemit(Comms,[ansi(yh,HAIL)]-[ansi(wh,name(%0))]\([name(%1)]\)->[ansi(wh,name(%2))]: %3,1)]
-
&FN.MANIFEST #208=
  [rpc(Econ.cargojob_manifest,%0)]
-
&FN.SHIPSBYCAPTAIN #208=
  switch(
         [t(setr(p,pmatch(%0)))]
         [t(strlen(
                   setr(r,
                        squish(
                               map(
                                   #lambda/
                                   \[if(
                                        strmatch(get(%%0/data.roster),*%qp:captain*),
                                        %%0
                                       )\],
                                   iter(
                                        lvthings(get(v(data)/bin.parents)),
                                        children(itext(0))
                                       )
                                  )
                              )
                       )
                   ))],
         0?,#-1 NOT A PLAYER,
         10,#-1 NO SHIPS FOUND,
         %qr
        )
-
&FN.ISSTATION #208=
  ifelse(eq(default(%0/space`size,1),9),1,0)
-
&FN.FINDCLASS #208=
  firstof(
         setinter(
                 %0,
                 setr(l,lvthings(get(v(data)/bin.parents)))
                 ),
         if(setr(p,element(
                          iter(
                              %ql,
                              get(itext(0)/space`class)
                              ,,|),
                          *%0*,|)),
           elements(
                   %ql,
                   %qp
                   ),
           0)
         ,#-1)
-
&FN.GETCAPTAIN #208=
  switch(
        [spacesys(isship,%0)]
        [setr(c,trim(
                    grab(
                        get(%0/data.roster),
                        *:captain),
                    :captain)
                    )],
        0*,#-1 NOT A SHIP,
        1,#-1 NO CAPTAIN,
        %qc)
-
&FN.FINDEXIT #208=
  firstof(
         setinter(
                 %1,
                 setr(l,lexits(room(%0)))
                 ),
         if(setr(e,element(
                          iter(
                              %ql,
                              name(##)
                              ,,|),
                          *%1*,|)),
           elements(
                   %ql,
                   %qe
                   ),
           0)
         ,#-1)
-
&FN.ISTAXIWAY #208=
  hasattrval(%0/data.taxiway)
-
&FN.TAXI #208=
  switch(
        [spacesys(isship,%0)]
        [spacesys(isdocked,%0)]
        [not(spacesys(iscapship,%0))]
        [if(setr(e,spacesys(findexit,%0,%1)),1,0)]
        [t(spacesys(istaxiway,%qe))],
        0????,#-1 INVALID SHIP OBJECT,
        10???,#-1 SHIP NOT DOCKED,
        110??,#-1 CAPSHIPS CANNOT TAXI,
        1110?,#-1 EXIT NOT FOUND,
        11110,#-1 NOT A TAXIWAY,
        11111,
             [nsremit(loc(%0),The [ansi(wh,name(%0))] taxis towards [ansi(wh,name(loc(%qe)))].)]
             [tel(%0,loc(%qe))]A
             [nsremit(loc(%0,The [ansi(wh,name(%0))] taxis in from [ansi(wh,name(home(%qe)))].)]
             [set(%0,data.docked:[loc(%qe)])]
             [spacesys(notify.consoles,%0,Taxi procedure complete.)]
             [spacesys(notify.ship,%0,The ship shudders as it comes to a halt.)]
        )
-
&FN.GETDESTOBJ #208= 
  [firstof(
           default(%0/space`destination.obj,0),
           #-1 NO DESTINATION SET
          )]
-
&FN.UNLOAD.SHIP #208=
  switch(
        [spacesys(isship,%0)]
        [spacesys(hasbay,%0)]
        [spacesys(isdocked,%0)]
        [spacesys(isship,%1)]
        [not(spacesys(iscapship,%1))]
        [spacesys(isdocked,%1)]
        [spacesys(isbayopen,%0)]
        [spacesys(canboard,%0,%2)]
        [spacesys(canboard,%1,%2)]
        [match(get(%1/data.docked),get(%0/data.landing))],
        0?????????,#-1 INVALID ACTOR SHIP,
        10????????,#-1 ACTOR SHIP HAS NO BAY,
        110???????,#-1 ACTOR SHIP NOT DOCKED,
        1110??????,#-1 INVALID VICTIM SHIP,
        11110?????,#-1 VICTIM SHIP IS CAPSHIP,
        111110????,#-1 VICTIM SHIP NOT DOCKED,
        1111110???,#-1 ACTOR SHIP BAY DOORS CLOSED,
        11111110??,#-1 ACTOR SHIP PERMISSION DENIED,
        111111110?,#-1 VICTIM SHIP PERMISSION DENIED,
        1111111111,
               [nsremit(loc(%1),The [ansi(wh,name(%1))] is lifted free of the [ansi(wh,name(%0))]'s docking bay by the bay's loader arms. )]
               [tel(%1,loc(%0))]
               [nsremit(loc(%1),The [ansi(wh,name(%1))] is lifted out of the [ansi(wh,name(%0))]'s docking bay by massive loader arms, and is placed on the ground.)]
               [set(%1,data.docked:[loc(%1)])]
               [spacesys(notify.consoles,%0,The [name(%1)] has been unloaded successfully from the [name(%0)].)]
               [spacesys(notify.consoles,%1,The [name(%1)] has been unloaded successfully from the [name(%0)].)]
               [spacesys(notify.ship,%1,The ship shudders and rocks as it is deposited on the ground by the [name(%0)]'s loader arms.)]
        ,#-1 SHIP NOT IN BAY)
-
&FN.LOAD.SHIP #208=
  switch(
        [not(match(%0,%1))]
        [spacesys(isship,%0)]
        [spacesys(hasbay,%0)]
        [spacesys(isdocked,%0)]
        [spacesys(isship,%1)]
        [not(spacesys(iscapship,%1))]
        [spacesys(isdocked,%1)]
        [spacesys(isbayopen,%0)]
        [spacesys(canboard,%0,%2)]
        [spacesys(canboard,%1,%2)]
        [match(loc(%0),loc(%1))],
        0??????????,#-1 CANNOT LOAD SELF,
        10?????????,#-1 INVALID ACTOR SHIP,
        110????????,#-1 ACTOR SHIP HAS NO BAY,
        1110???????,#-1 ACTOR SHIP NOT DOCKED,
        11110??????,#-1 INVALID VICTIM SHIP,
        111110?????,#-1 VICTIM SHIP IS CAPSHIP,
        1111110????,#-1 VICTIM SHIP NOT DOCKED,
        11111110???,#-1 ACTOR SHIP BAY DOORS CLOSED,
        111111110??,#-1 ACTOR SHIP PERMISSION DENIED,
        1111111110?,#-1 VICTIM SHIP PERMISSION DENIED,
        11111111111,
                [nsremit(loc(%1),The [ansi(wh,name(%1))] is lifted into the [ansi(wh,name(%0))]'s docking bay by the bay's loader arms.)]
                [tel(%1,get(%0/data.landing))]
                [nsremit(loc(%1),The [ansi(wh,name(%1)])] is lifted into the [ansi(wh,name(%0))]'s docking bay by the bay's loader arms, and placed upon the deck.)]
                [set(%1,data.docked:[get(%0/data.landing)])]
                [spacesys(notify.consoles,%0,The [name(%1)] has been loaded successfully aboard the [name(%0)].)]
                [spacesys(notify.consoles,%1,The [name(%1)] has been loaded successfully aboard the [name(%0)].)]
                [spacesys(notify.ship,%1,The ship shudders and rocks as it is deposited in the bay of the [name(%0)].)]
        ,#-1 SHIPS NOT ADJACENT)
-
&FN.FINDSHIP.ROOM #208=
  firstof(
         setinter(
                  %1,
                  setr(l,edit(lvthings(room(%0)),%0,))
                  ),
         if(setr(e,element(
                          iter(
                              %ql,
                              name(##)
                              ,,|),
                          *%1*,|)),
            elements(
                    %ql,
                    %qe
                    ),
            0)
         ,#-1)
-
&FN.FINDSHIP.BAY #208=
  firstof(
         setinter(
                  %1,
                  setr(l,lvthings(get(%0/data.landing)))
                  ),
         if(setr(e,element(
                          iter(
                              %ql,
                              name(##)
                              ,,|),
                          *%1*,|)),
            elements(
                    %ql,
                    %qe
                    ),
            0)
         ,#-1)
-
&FN.FINDSHIP.ALL #208=
  firstof(
          setinter(
                   %1,
                   setr(local_list,
                        setdiff(
                                lvthings(
                                         room(%0)
                                        ),
                                %0,
                               )
                       )
                  ),
          ifelse(
                 setr(list_pos,
                      element(
                              iter(
                                   %q<local_list>,
                                   name(##),
                                   ,|
                                  ),
                              %1*,
                              |
                             )
                     ),
                 elements(
                          %q<local_list>,
                          %q<list_pos>
                         ),
                 0
                ),
          setinter(
                   %1,
                   setr(full_list,
                        setdiff(
                                iter(
                                     lvthings(get(v(data)/bin.parents)),
                                     children(itext(0))
                                    ),
                                %q<local_list>
                               )
                       )
                  ),
          ifelse(
                 setr(list_pos,
                      element(
                              iter(
                                   %q<full_list>,
                                   name(##),
                                   ,|
                                  ),
                              %1*,
                              |
                             )
                     ),
                 elements(
                          %q<full_list>,
                          %q<list_pos>
                         ),
                 0
                ),
          #-1
         )
-
&FN.HAIL.WIPE #208=
  if(
     hasattrval(%0/data.hailtarget),
     wipe(%0/data.hailtarget)
    )
-
&FN.HAIL.SET #208=
  if(
     spacesys(isship,%0),
     set(%0,data.hailtarget:%1)
    )
-
&FN.HAIL.GETTARGET #208=
  ifelse(
     hasattrval(%0/data.hailtarget),
     get(%0/data.hailtarget),
     #-1
    )
