##################################
### PARENT: Command Console (#204)
##################################

# Setup the MUSH object
@set #204=!SAFE NO_COMMAND
-
@wipe #204
-
@set #204=SAFE
-
@lock/use #204=LOCK.CANUSECONSOLE/1
-
@lock/command #204=LOCK.ISMANNING/1
-
@lset #204/use=!no_inherit
-
@lset #204/command=!no_inherit
-
&DATA #204=#351
-
&COMMAND_LOCK`FAILURE #204=
  [ifelse(
    not(hasattrval(%!,data.ship)),
    [ansi(rh,WARNING:)] [trim(before(name(%!),<))] does not have a valid ship object set.,
    Huh? \(Type "help" for help.\)
    )]
-
&CMD.CON/HELP #204=$con/help:
  @nspemit %#=[titlebar(Available Console Commands)]%r
              [iter(
                  lattrp(%!/HELP.*),
                  [ansi(y,before(v(itext(0)),|))] - [after(v(itext(0)),|)],
                  ,%r)]%r
              [footerbar()]
-
&HELP.JUMP #204=
  jump <contact ID>|Jump to a new system.
-
&HELP.SCAN #204=
  scan|See a list of things within sensor range.
-
&HELP.SCAN.TARGET #204=
  scan <contact ID>|See detailed information on a contact.
-
&HELP.LAUNCH #204=
  launch|Take off.
-
&HELP.ROSTER/LIST #204=
  roster/list|See a list of crew members.
-
&HELP.ROSTER/ADD #204=
  roster/add <person>=CREW/VISITOR|Add a crew member.
-
&HELP.ROSTER/REMOVE #204=
  roster/remove <person>|Remove a crew member.
-
&HELP.LAND #204=
  land <contact ID>|Land on a planet or station.
-
&HELP.PLOT/CALC #204=
  plot/calc <contact ID>|Plot a course to a target.
-
&HELP.PLOT/ENGAGE #204=
  plot/engage|Engage your plotted course.
-
&HELP.PLOT/STOP #204=
  plot/stop|Stop the ship.
-
&HELP.UNMAN #204=
  unman|Stop using the console.
-
&HELP.SPOSE #204=
  spose <message>|Make a ship pose as if using the 'pose' command.
-
&HELP.HAIL #204=
  hail <contact ID>=<message>|Send a message to a contact.
-
&HELP.+SCHECK/LIST #204=
  +scheck/list|See a list of valid ship skills.
-
&HELP.+SCHECK #204=
  +scheck <skill> or +scheck/private <skill>|Check a ship skill.
-
&CMD.SCAN #204=$scan:
  @switch [not(spacesys(isdocked,setr(0,v(data.ship))))]=

          0,@nspemit %#=[spacesys(scan.land,%q0))],
          1,@nspemit %#=[spacesys(scan,%q0)]
-
&CMD.SCAN.TARGET #204=$scan *:
  @switch [not(spacesys(isdocked,setr(0,v(data.ship))))]
          [t(lte(%0,words(setr(1,spacesys(list.report,%q0)))))]=

          0?,@nspemit %#=[ansi(rh,>)] The ship is currently landed.,
          10,@nspemit %#=[ansi(rh,>)] Invalid contact.,
          11,@nspemit %#=[spacesys(scan.target,extract(%q1,%0,1))]
-
@ufail #204=[pemit(%#,
  [if([spacesys(ismanned,%!)],
    /@@ Console is manned by someone else @@/
    The [name(%!)] is already being manned by [spacesys(mannedby,%!)].,
    
    /@@ Access denied @@/
    Console access denied.
  )]
)]
-
@desc #204=
  A command console. It is currently [ifelse([hasattrval(%!,data.manned)],manned by [spacesys(mannedby,%!)],unmanned)].%r%r
  The ship is currently [ifelse(spacesys(ismoving,setr(0,v(data.ship))),ansi(gh,moving),ansi(rh,stopped))].%r
  Speed: [ifelse(spacesys(ismoving,%q0),mul(spacesys(speed,%q0),spacesys(interval)),0)] km/h%r
  Heading: [ifelse(spacesys(ismoving,v(data.ship)),round(spacesys(heading,v(data.ship)),0),0)]m0%r%r
  You may [ansi(yh,man)] or [ansi(yh,use)] this console.%r
  See [ansi(yh,help space)] for more information. 
-
&LOCK.CANUSECONSOLE #204=[spacesys(canuseconsole,v(data.ship),%#)]
-
&LOCK.ISMANNING #204=[and(spacesys(ismanning,%!,%#),hasattrval(%!,data.ship))]
-
&AUSE #204=
  @name %!=[trim(before(name(%!),<))] <[name(%#)]>;
  &data.manned %!=%#
-
&CMD.UNMAN #204=$unman:
  @name %!=[trim(before(name(%!),<))] <Unmanned>;
  @nspemit %#=You unman the [trim(before(name(%!),<))];
  @nsoemit %#=[name(%#)] unmans the [trim(before(name(%!),<))].;
  &data.manned %!;
-
&OUSE #204=
  [if(
      spacesys(isunmanned,%!),
      mans the [trim(before(name(%!),<))].
      )]
-
&USE #204=
  [ifelse(
      spacesys(ismanned,%!),
      You are already manning the [trim(before(name(%!),<))].,
      You man the [trim(before(name(%!),<))].
      )] 
-
&CMD.LAND #204=$land *:
  +space/land [v(data.ship)]=[extract(spacesys(update.report,v(data.ship)),%0,1)]
-
&CMD.LAUNCH #204=$launch:
  +space/launch [v(data.ship)]
-
&CMD.PLOT/CALC #204=$plot/calc *:
  @switch [spacesys(isactive,v(data.ship))]
          [not(spacesys(ismoving,v(data.ship)))]
          [t(lte(%0,words(setr(0,spacesys(update.report,v(data.ship))))))]=

          0??,@nspemit %#=[ansi(rh,>)] The ship is currently inactive.,
          10?,@nspemit %#=[ansi(rh,>)] The ship must be stopped before a new course can be calculated.,
          110,@nspemit %#=[ansi(rh,>)] Invalid contact ID.,
          111,{think [spacesys(setdest,v(data.ship),setr(1,extract(%q0,%0,1)))];
               @nspemit %#=[ansi(gh,>)] Plotting a course to [name(%q1)]...%r
                           [ansi(gh,>)] Course laid in.  Estimated time of arrival is 
                                        [ansi(yh,etimefmt($h hours $m minutes,add(stringsecs(spacesys(eta,v(data.ship))),60)))].
              }
-
&CMD.PLOT/ENGAGE #204=$plot/engage:
  +space/advance [v(data.ship)]
-
&CMD.PLOT/STOP #204=$plot/stop:
  +space/stop [v(data.ship)]
-
&CMD.JUMP #204=$jump *:
  +space/jump [v(data.ship)]=[extract(spacesys(update.report,v(data.ship)),%0,1)]
-
&CMD.ROSTER/LIST #204=$roster/list:
  @switch [spacesys(isguest,v(data.ship),%#)]=
  
          0,@nspemit %#=[ansi(rh,>)] Permission denied.,
          1,@nspemit %#=[spacesys(roster,v(data.ship))]
-
&CMD.ROSTER/ADD #204=$roster/add *=*:
  @switch [spacesys(iscaptain,v(data.ship),%#)]
          [t(setr(0,pmatch(%0)))]
          [t(match(visitor crew,%1))]=

          0??,@nspemit %#=[ansi(rh,>)] Permission denied.,
          10?,@nspemit %#=[ansi(rh,>)] Invalid person.,
          110,@nspemit %#=[ansi(rh,>)] Position must be VISITOR or CREW.,
          111,{@nspemit %#=[ansi(gh,>)] Roster updated.;
               think [spacesys(roster.add,v(data.ship),%q0,%1)]
              }
-
&CMD.ROSTER/REMOVE #204=$roster/remove *:
  @switch [spacesys(iscaptain,v(data.ship),%#)]
          [spacesys(isguest,v(data.ship),setr(0,pmatch(%0)))]
          [not(strmatch(%q0,%#))]=

          0??,@nspemit %#=[ansi(rh,>)] Permission denied.,
          10?,@nspemit %#=[ansi(rh,>)] That person is not on the ship's roster.,
          110,@nspemit %#=[ansi(rh,>)] You cannot remove yourself.,
          111,{@nspemit %#=[ansi(gh,>)] Roster updated.;
               think [spacesys(roster.remove,v(data.ship),%q0)]
              }
-
&CMD.HAIL #204=$hail *=*:
  @switch [t(lte(%0,words(setr(2,spacesys(update.report,v(data.ship))))))]=

          0,@nspemit %#=[ansi(rh,>)] Invalid contact.,
          1,{@nspemit %#=[ansi(gh,>)] Message sent.;
             think spacesys(hail,v(data.ship),%#,extract(%q2,%0,1),%1)
            }
-
&CMD.SPOSE #204=$spose *:
  @switch [spacesys(isactive,v(data.ship))]=

          0,@nspemit %#=[ansi(rh,>)] The Ship is currently landed.,
          1,[spacesys(spose,v(data.ship),%0,%#,1)]
-
&CMD.SCHECK #204=$^\+scheck(/private)? (.*):
  @swi/first [t(setr(0,grab(setr(1,spacesys(list.skills)),*.%2*)))]=
    
             0,{@nspemit %#=[ansi(hr,>)] That's not a valid skill. Valid ship skills are: [itemize(iter(%q1,capstr(lcstr(after(itext(0),.)))))]},
             {th [u(fn.scheck,switch(%1,,public,%1),v(data.ship),after(%q0,.))]}
-
&FN.SCHECK #204=
  [setq(m,
      [switch(%0,/private,privately%b)]+checks [poss(%1)] [ansi(h,%2)] skill: 
      [ansi(h,setr(r,add(
                      rand(-2,2),
                      spacesys(skill,%1,%2)
                      )))] 
      ([num2adj(%qr)])
      )]
  [switch(%0,/private,spacesys(notify.consoles,%1,The [ansi(h,name(%1))] %qm),spacesys(spose,%1,%qm))]
-
&CMD.SCHECK_DUMMY #204=$+scheck:
  @nspemit %#=[ansi(rh,>)] Try [ansi(yh,+scheck <skill>)] or see [ansi(yh,help +scheck)] for more information.
-
@set #204/cmd.scheck=regexp
-
&CMD.SCHECK/LIST #204=$+scheck/list:
  @nspemit %#=[ansi(gh,>)] Valid ship skills: [itemize(iter(spacesys(list.skills),capstr(lcstr(after(itext(0),.)))))].
-
&CMD.PLOT/ETA #204=$plot/eta:
  @nspemit %#=[ifelse(
                    setr(0,spacesys(eta,v(data.ship))),
                    [ansi(gh,>)] ETA: [ansi(yh,%q0)],
                    [ansi(rh,>)] The ship is not in motion.
                    )]
-
&CMD.STATUS #204=$status:
  @nspemit %#=[spacesys(status,v(data.ship))]
-
&CMD.BAY/OPEN #204=$bay/open:
  @assert [spacesys(hasbay,v(data.ship))]=@nspemit %#=[ansi(rh,>)] This ship does not have a docking bay.;
  @assert [not(spacesys(isbayopen,v(data.ship)))]=@nspemit %#=[ansi(rh,>)] The bay doors are already open.;

  think [spacesys(openbay,v(data.ship))];
  think [spacesys(spose,v(data.ship),opens its bay doors.)];
  @nspemit %#=[ansi(gh,>)] Opening the bay doors.
-
&CMD.BAY/CLOSE #204=$bay/close:
  @assert [spacesys(hasbay,v(data.ship))]=@nspemit %#=[ansi(rh,>)] This ship does not have a docking bay.;
  @assert [spacesys(isbayopen,v(data.ship))]=@nspemit %#=[ansi(rh,>)] The bay doors are already closed.;

  think [spacesys(closebay,v(data.ship))];
  think [spacesys(spose,v(data.ship),closes its bay doors.)];
  @nspemit %#=[ansi(gh,>)] Closing the bay doors.
-
&CMD.SURVEY #204=$survey *:
  @assert [not(spacesys(isdocked,setr(Ship,v(data.ship))))]=@nspemit %#=[ansi(rh,>)] The ship is currently docked.;
  @assert [t(lte(%0,words(setr(Ship.report,spacesys(list.report,%q<Ship>)))))]=@nspemit %#=[ansi(rh,>)] No such contact on sensors.;
  @assert [strmatch(spacesys(class,setr(Celestial,extract(%q<Ship.report>,%0,1))),Celestial)]=@nspemit %#=[ansi(rh,>)] You can only survey celestial objects like planets and asteroids.;
  @assert [eq(spacesys(distance,%q<Ship>,%q<Celestial>),0)]=@nspemit %#=[ansi(rh,>)] You are out of range.;
  @assert [gte(secs(),setr(Expires,add(spacesys(survey.last,%q<Ship>,%q<Celestial>),21600)))]=
          @nspemit %#=[ansi(rh,>)] You must wait at least [ansi(yh,timestring(sub(%q<Expires>,secs())))] 
                      before anyone will be interested in purchasing new survey data for that celestial object.;
  
  think setr(Pay,spacesys(survey,%q<Ship>,%q<Celestial>,%#));
  @nspemit %#=[ansi(gh,>)] You are paid [ansi(yh,%q<Pay>c)] by Von Sprechen Industries for your survey data.
-

